# This file was generated by an LLM.

{
  lib,
  ...
}:
let
  stableKernelParams = [
    "mem_sleep_default=deep"
    "amd_pstate=passive"

    "panic=10"
    "panic_on_oops=1"
  ];
in
{
  #### Kernel & power management ################################################
  # Append our params after any existing ones
  boot.kernelParams = lib.mkAfter stableKernelParams;

  #### Evidence capture #########################################################
  # Persist the journal across boots
  services.journald.extraConfig = lib.mkDefault "Storage=persistent";

  # Record hardware/RAS events (MCE/PCIe/etc.)
  # FIXED: Correct option path is hardware.rasdaemon, not services.rasdaemon
  hardware.rasdaemon.enable = lib.mkDefault true;

  # Enable crash kernel so panics produce a vmcore (kdump)
  # NOTE: This can potentially cause boot issues on some systems
  boot.crashDump.enable = lib.mkDefault true;

  #### Firmware & updates #######################################################
  # FIXED: Removed conflicting firmware configuration
  # enableRedistributableFirmware already includes linux-firmware
  hardware.enableRedistributableFirmware = lib.mkDefault true;

  # Only add additional firmware if needed beyond what's already included
  # hardware.firmware = lib.mkDefault [ pkgs.some-additional-firmware ];

  # Enable firmware updates (BIOS/EC, NVMe, etc.) via fwupd
  services.fwupd.enable = lib.mkDefault true;

  #### Optional toggles (uncomment ONE at a time if issues persist) #############
  # 1) Fully disable amd_pstate, fall back to acpi-cpufreq (PPD still works via governors)
  # boot.kernelParams = lib.mkAfter [ "amd_pstate=disable" ];
  # powerManagement.cpuFreqGovernor = lib.mkDefault "schedutil";

  # 2) Last resort for rare AMD idle quirks
  # boot.kernelParams = lib.mkAfter [ "idle=nomwait" ];

  #### Verification cheatsheet (run after reboot) ###############################
  #   cat /sys/power/mem_sleep
  #   cat /sys/devices/system/cpu/cpufreq/policy0/scaling_driver
  #   cat /sys/module/amd_pstate/parameters/status
  #   powerprofilesctl get && powerprofilesctl list
  #   journalctl -u rasdaemon --no-pager | tail -50
}
